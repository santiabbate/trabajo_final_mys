/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2 */

#ifndef PB_GENERATOR_SW_SRC_MESSAGES_PB_H_INCLUDED
#define PB_GENERATOR_SW_SRC_MESSAGES_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Control_msg_Command {
    Control_msg_Command_START = 0,
    Control_msg_Command_STOP = 1,
    Control_msg_Command_TRIG_DBG = 2,
    Control_msg_Command_BROKEN_CONN = 3
} Control_msg_Command;

typedef enum _Ack_msg_Retval {
    Ack_msg_Retval_ACK = 0,
    Ack_msg_Retval_INVALID_MSG = 1,
    Ack_msg_Retval_BAD_CONFIG = 2,
    Ack_msg_Retval_NO_CONFIG = 3,
    Ack_msg_Retval_BAD_COMMAND = 4,
    Ack_msg_Retval_DEBUG_ERROR = 5,
    Ack_msg_Retval_DEBUG_IS_VALID = 6
} Ack_msg_Retval;

typedef enum _Generator_Config_msg_Mode {
    Generator_Config_msg_Mode_CONTINUOUS = 0,
    Generator_Config_msg_Mode_PULSED = 1
} Generator_Config_msg_Mode;

/* Struct definitions */
typedef struct _Demodulator_config_msg {
    char dummy_field;
} Demodulator_config_msg;

typedef struct _Ack_msg {
    Ack_msg_Retval retval;
} Ack_msg;

typedef struct _Const_Freq {
    uint32_t freq_khz;
} Const_Freq;

typedef struct _Control_msg {
    Control_msg_Command command;
} Control_msg;

typedef struct _Debug_msg {
    int32_t i_samples[125000];
    int32_t q_samples[125000];
    uint32_t num_samples;
} Debug_msg;

typedef struct _Freq_Mod {
    uint32_t low_freq_khz;
    uint32_t high_freq_khz;
    uint32_t length_us;
} Freq_Mod;

typedef struct _Phase_Mod {
    uint32_t freq_khz;
    uint32_t barker_seq_num;
    uint32_t barker_subpulse_length_us;
} Phase_Mod;

typedef struct _Generator_Config_msg {
    bool debug_enabled;
    Generator_Config_msg_Mode mode;
    pb_size_t which_modulation_config;
    union {
        Const_Freq const_freq;
        Freq_Mod freq_mod;
        Phase_Mod phase_mod;
    };
    uint32_t period_us;
    uint32_t pulse_length_us;
} Generator_Config_msg;

typedef struct _Config_msg {
    pb_size_t which_config;
    union {
        Generator_Config_msg generator;
        Demodulator_config_msg demodulator;
    };
} Config_msg;

typedef struct _Base_msg {
    pb_size_t which_message;
    union {
        Control_msg control;
        Config_msg config;
        Ack_msg ack;
    };
} Base_msg;


/* Helper constants for enums */
#define _Control_msg_Command_MIN Control_msg_Command_START
#define _Control_msg_Command_MAX Control_msg_Command_BROKEN_CONN
#define _Control_msg_Command_ARRAYSIZE ((Control_msg_Command)(Control_msg_Command_BROKEN_CONN+1))

#define _Ack_msg_Retval_MIN Ack_msg_Retval_ACK
#define _Ack_msg_Retval_MAX Ack_msg_Retval_DEBUG_IS_VALID
#define _Ack_msg_Retval_ARRAYSIZE ((Ack_msg_Retval)(Ack_msg_Retval_DEBUG_IS_VALID+1))

#define _Generator_Config_msg_Mode_MIN Generator_Config_msg_Mode_CONTINUOUS
#define _Generator_Config_msg_Mode_MAX Generator_Config_msg_Mode_PULSED
#define _Generator_Config_msg_Mode_ARRAYSIZE ((Generator_Config_msg_Mode)(Generator_Config_msg_Mode_PULSED+1))


/* Initializer values for message structs */
#define Base_msg_init_default                    {0, {Control_msg_init_default}}
#define Control_msg_init_default                 {_Control_msg_Command_MIN}
#define Config_msg_init_default                  {0, {Generator_Config_msg_init_default}}
#define Ack_msg_init_default                     {_Ack_msg_Retval_MIN}
#define Generator_Config_msg_init_default        {0, _Generator_Config_msg_Mode_MIN, 0, {Const_Freq_init_default}, 0, 0}
#define Const_Freq_init_default                  {0}
#define Freq_Mod_init_default                    {0, 0, 0}
#define Phase_Mod_init_default                   {0, 0, 0}
#define Demodulator_config_msg_init_default      {0}

#define Base_msg_init_zero                       {0, {Control_msg_init_zero}}
#define Control_msg_init_zero                    {_Control_msg_Command_MIN}
#define Config_msg_init_zero                     {0, {Generator_Config_msg_init_zero}}
#define Ack_msg_init_zero                        {_Ack_msg_Retval_MIN}
#define Generator_Config_msg_init_zero           {0, _Generator_Config_msg_Mode_MIN, 0, {Const_Freq_init_zero}, 0, 0}
#define Const_Freq_init_zero                     {0}
#define Freq_Mod_init_zero                       {0, 0, 0}
#define Phase_Mod_init_zero                      {0, 0, 0}
#define Demodulator_config_msg_init_zero         {0}

/* Field tags (for use in manual encoding/decoding) */
#define Ack_msg_retval_tag                       1
#define Const_Freq_freq_khz_tag                  1
#define Control_msg_command_tag                  1
#define Debug_msg_i_samples_tag                  1
#define Debug_msg_q_samples_tag                  2
#define Debug_msg_num_samples_tag                3
#define Freq_Mod_low_freq_khz_tag                1
#define Freq_Mod_high_freq_khz_tag               2
#define Freq_Mod_length_us_tag                   3
#define Phase_Mod_freq_khz_tag                   1
#define Phase_Mod_barker_seq_num_tag             2
#define Phase_Mod_barker_subpulse_length_us_tag  3
#define Generator_Config_msg_debug_enabled_tag   1
#define Generator_Config_msg_mode_tag            2
#define Generator_Config_msg_const_freq_tag      3
#define Generator_Config_msg_freq_mod_tag        4
#define Generator_Config_msg_phase_mod_tag       5
#define Generator_Config_msg_period_us_tag       6
#define Generator_Config_msg_pulse_length_us_tag 7
#define Config_msg_generator_tag                 1
#define Config_msg_demodulator_tag               2
#define Base_msg_control_tag                     1
#define Base_msg_config_tag                      2
#define Base_msg_ack_tag                         3

/* Struct field encoding specification for nanopb */
#define Base_msg_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,control,control),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,config,config),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,ack,ack),   3)
#define Base_msg_CALLBACK NULL
#define Base_msg_DEFAULT NULL
#define Base_msg_message_control_MSGTYPE Control_msg
#define Base_msg_message_config_MSGTYPE Config_msg
#define Base_msg_message_ack_MSGTYPE Ack_msg

#define Control_msg_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    command,           1)
#define Control_msg_CALLBACK NULL
#define Control_msg_DEFAULT NULL

#define Config_msg_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,generator,generator),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,demodulator,demodulator),   2)
#define Config_msg_CALLBACK NULL
#define Config_msg_DEFAULT NULL
#define Config_msg_config_generator_MSGTYPE Generator_Config_msg
#define Config_msg_config_demodulator_MSGTYPE Demodulator_config_msg

#define Ack_msg_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    retval,            1)
#define Ack_msg_CALLBACK NULL
#define Ack_msg_DEFAULT NULL

#define Generator_Config_msg_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     debug_enabled,     1) \
X(a, STATIC,   SINGULAR, UENUM,    mode,              2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (modulation_config,const_freq,const_freq),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (modulation_config,freq_mod,freq_mod),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (modulation_config,phase_mod,phase_mod),   5) \
X(a, STATIC,   SINGULAR, UINT32,   period_us,         6) \
X(a, STATIC,   SINGULAR, UINT32,   pulse_length_us,   7)
#define Generator_Config_msg_CALLBACK NULL
#define Generator_Config_msg_DEFAULT NULL
#define Generator_Config_msg_modulation_config_const_freq_MSGTYPE Const_Freq
#define Generator_Config_msg_modulation_config_freq_mod_MSGTYPE Freq_Mod
#define Generator_Config_msg_modulation_config_phase_mod_MSGTYPE Phase_Mod

#define Const_Freq_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   freq_khz,          1)
#define Const_Freq_CALLBACK NULL
#define Const_Freq_DEFAULT NULL

#define Freq_Mod_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   low_freq_khz,      1) \
X(a, STATIC,   SINGULAR, UINT32,   high_freq_khz,     2) \
X(a, STATIC,   SINGULAR, UINT32,   length_us,         3)
#define Freq_Mod_CALLBACK NULL
#define Freq_Mod_DEFAULT NULL

#define Phase_Mod_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   freq_khz,          1) \
X(a, STATIC,   SINGULAR, UINT32,   barker_seq_num,    2) \
X(a, STATIC,   SINGULAR, UINT32,   barker_subpulse_length_us,   3)
#define Phase_Mod_CALLBACK NULL
#define Phase_Mod_DEFAULT NULL

#define Demodulator_config_msg_FIELDLIST(X, a) \

#define Demodulator_config_msg_CALLBACK NULL
#define Demodulator_config_msg_DEFAULT NULL

#define Debug_msg_FIELDLIST(X, a) \
X(a, STATIC,   FIXARRAY, SINT32,   i_samples,         1) \
X(a, STATIC,   FIXARRAY, SINT32,   q_samples,         2) \
X(a, STATIC,   SINGULAR, UINT32,   num_samples,       3)
#define Debug_msg_CALLBACK NULL
#define Debug_msg_DEFAULT NULL

extern const pb_msgdesc_t Base_msg_msg;
extern const pb_msgdesc_t Control_msg_msg;
extern const pb_msgdesc_t Config_msg_msg;
extern const pb_msgdesc_t Ack_msg_msg;
extern const pb_msgdesc_t Generator_Config_msg_msg;
extern const pb_msgdesc_t Const_Freq_msg;
extern const pb_msgdesc_t Freq_Mod_msg;
extern const pb_msgdesc_t Phase_Mod_msg;
extern const pb_msgdesc_t Demodulator_config_msg_msg;
extern const pb_msgdesc_t Debug_msg_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Base_msg_fields &Base_msg_msg
#define Control_msg_fields &Control_msg_msg
#define Config_msg_fields &Config_msg_msg
#define Ack_msg_fields &Ack_msg_msg
#define Generator_Config_msg_fields &Generator_Config_msg_msg
#define Const_Freq_fields &Const_Freq_msg
#define Freq_Mod_fields &Freq_Mod_msg
#define Phase_Mod_fields &Phase_Mod_msg
#define Demodulator_config_msg_fields &Demodulator_config_msg_msg
#define Debug_msg_fields &Debug_msg_msg

/* Maximum encoded size of messages (where known) */
#define Base_msg_size                            40
#define Control_msg_size                         2
#define Config_msg_size                          38
#define Ack_msg_size                             2
#define Generator_Config_msg_size                36
#define Const_Freq_size                          6
#define Freq_Mod_size                            18
#define Phase_Mod_size                           18
#define Demodulator_config_msg_size              0
#define Debug_msg_size                           1500006

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
